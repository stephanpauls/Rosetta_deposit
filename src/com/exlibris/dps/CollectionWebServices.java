
package com.exlibris.dps;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-2b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CollectionWebServices", targetNamespace = "http://dps.exlibris.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CollectionWebServices {


    /**
     * 
     * @param pdsHandle
     * @param collection
     * @return
     *     returns long
     * @throws Exception_Exception
     * @throws InvalidCollectionInfoException_Exception
     * @throws UserAuthorizeException_Exception
     * @throws InvalidMIDException_Exception
     * @throws InvalidXmlException_Exception
     * @throws InvalidTypeException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createCollection", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.CreateCollection")
    @ResponseWrapper(localName = "createCollectionResponse", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.CreateCollectionResponse")
    public long createCollection(
        @WebParam(name = "pdsHandle", targetNamespace = "")
        String pdsHandle,
        @WebParam(name = "collection", targetNamespace = "")
        Collection collection)
        throws Exception_Exception, InvalidCollectionInfoException_Exception, InvalidMIDException_Exception, InvalidTypeException_Exception, InvalidXmlException_Exception, UserAuthorizeException_Exception
    ;

    /**
     * 
     * @param pdsHandle
     * @param collectionId
     * @throws Exception_Exception
     * @throws InvalidCollectionInfoException_Exception
     * @throws UserAuthorizeException_Exception
     * @throws InstitutionAccessException_Exception
     * @throws DeleteCollectionException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteCollection", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.DeleteCollection")
    @ResponseWrapper(localName = "deleteCollectionResponse", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.DeleteCollectionResponse")
    public void deleteCollection(
        @WebParam(name = "pdsHandle", targetNamespace = "")
        String pdsHandle,
        @WebParam(name = "collectionId", targetNamespace = "")
        long collectionId)
        throws DeleteCollectionException_Exception, Exception_Exception, InstitutionAccessException_Exception, InvalidCollectionInfoException_Exception, UserAuthorizeException_Exception
    ;

    /**
     * 
     * @param pdsHandle
     * @param externalSystem
     * @param externalId
     * @return
     *     returns com.exlibris.dps.Collection
     * @throws Exception_Exception
     * @throws UserAuthorizeException_Exception
     * @throws InstitutionAccessException_Exception
     * @throws NoCollectionFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCollectionByExternalId", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetCollectionByExternalId")
    @ResponseWrapper(localName = "getCollectionByExternalIdResponse", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetCollectionByExternalIdResponse")
    public Collection getCollectionByExternalId(
        @WebParam(name = "pdsHandle", targetNamespace = "")
        String pdsHandle,
        @WebParam(name = "externalSystem", targetNamespace = "")
        String externalSystem,
        @WebParam(name = "externalId", targetNamespace = "")
        String externalId)
        throws Exception_Exception, InstitutionAccessException_Exception, NoCollectionFoundException_Exception, UserAuthorizeException_Exception
    ;

    /**
     * 
     * @param pdsHandle
     * @param collectionId
     * @return
     *     returns com.exlibris.dps.Collection
     * @throws Exception_Exception
     * @throws UserAuthorizeException_Exception
     * @throws InstitutionAccessException_Exception
     * @throws NoCollectionFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCollectionById", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetCollectionById")
    @ResponseWrapper(localName = "getCollectionByIdResponse", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetCollectionByIdResponse")
    public Collection getCollectionById(
        @WebParam(name = "pdsHandle", targetNamespace = "")
        String pdsHandle,
        @WebParam(name = "collectionId", targetNamespace = "")
        long collectionId)
        throws Exception_Exception, InstitutionAccessException_Exception, NoCollectionFoundException_Exception, UserAuthorizeException_Exception
    ;

    /**
     * 
     * @param pdsHandle
     * @param collectionPath
     * @return
     *     returns com.exlibris.dps.Collection
     * @throws Exception_Exception
     * @throws UserAuthorizeException_Exception
     * @throws InstitutionAccessException_Exception
     * @throws NoCollectionFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCollectionByName", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetCollectionByName")
    @ResponseWrapper(localName = "getCollectionByNameResponse", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetCollectionByNameResponse")
    public Collection getCollectionByName(
        @WebParam(name = "pdsHandle", targetNamespace = "")
        String pdsHandle,
        @WebParam(name = "collectionPath", targetNamespace = "")
        String collectionPath)
        throws Exception_Exception, InstitutionAccessException_Exception, NoCollectionFoundException_Exception, UserAuthorizeException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getHeartBit", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetHeartBit")
    @ResponseWrapper(localName = "getHeartBitResponse", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.GetHeartBitResponse")
    public String getHeartBit();

    /**
     * 
     * @param pdsHandle
     * @param collection
     * @throws Exception_Exception
     * @throws InvalidCollectionInfoException_Exception
     * @throws UserAuthorizeException_Exception
     * @throws InstitutionAccessException_Exception
     * @throws InvalidMIDException_Exception
     * @throws InvalidXmlException_Exception
     * @throws InvalidTypeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateCollection", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.UpdateCollection")
    @ResponseWrapper(localName = "updateCollectionResponse", targetNamespace = "http://dps.exlibris.com/", className = "com.exlibris.dps.UpdateCollectionResponse")
    public void updateCollection(
        @WebParam(name = "pdsHandle", targetNamespace = "")
        String pdsHandle,
        @WebParam(name = "collection", targetNamespace = "")
        Collection collection)
        throws Exception_Exception, InstitutionAccessException_Exception, InvalidCollectionInfoException_Exception, InvalidMIDException_Exception, InvalidTypeException_Exception, InvalidXmlException_Exception, UserAuthorizeException_Exception
    ;

}
